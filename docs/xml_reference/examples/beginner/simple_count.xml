<?xml version="1.0" encoding="UTF-8"?>

<!-- This example application shows a minimal project that uses the counter skill
-->

<pitasc>

    <models>
        <!-- Include pitasc -->
        <include package="pitasc_library" file="models/pitasc.xml"/>

        <!-- Include the UR5 -->
        <include package="pitasc_library" file="universal_robots/ur.xml"/>

        <!-- Include the idle skill -->
        <include package="pitasc_library" file="models/skills.xml"/>

    </models>

    <!-- Create a project -->
    <clone prototype="project">

        <member id="configuration">
            <!-- Use the default configuration with recommended settings -->
            <clone id="configuration" prototype="default_configuration"/>
        </member>

        <member id="environment">
            <!-- Add a UR5 -->
            <clone prototype="robot_ur5"/>
        </member>

        <member id="applications">

            <!-- Use a skill sequence as a container -->
            <clone prototype="skill_sequence">

                <!-- Use the UR5 for this skill (and for its subskill) -->
                <member id="robot" reference_id="environment.robot_ur5"/>

                <!-- Add subskill(s) -->
                <member id="skills">

                    <!-- needed, because pitasc does not create the robot publisher otherwise -->
                    <clone prototype="skill_relative_ptp">
                        <member id="relative_joint_state">0, 0, 0, 0, 0, 0</member>
                    </clone>

                    <!-- Idle for 3 seconds -->
                    <clone id="skill_test" prototype="skill_idle_duration">
                        <member id="duration">0.5</member>
                    </clone>

                    <!-- Basic usage of the counter condition skill, every
                         time the skill is executed, the counter gets ++
                         and is switched to repeat target.
                         If the condition is reached, it is switched to
                         condition_target
                     -->
                    <clone id="first_level" prototype="skill_counter_condition">
                        <member id="repeat_target">skill_test</member>
                        <member id="condition_target">succeeded</member>
                        <member id="count">10</member>
                    </clone>


                    <!-- You can also use the monitor, which immediatle triggers
                         a event based on the condition variable
                     -->
                    <clone id="monitor_test" prototype="skill_idle">

                        <member id="monitors">
                            <clone prototype="monitor_execution_counter">
                                <member id="event">yay</member>
                                <member id="count">5</member>
                            </clone>
                            <clone prototype="monitor_duration">
                                <member id="event">nope</member>
                                <member id="duration">1.0</member>
                            </clone>

                        </member>
                        <member id="transitions">
                            <clone prototype="transition">
                                <member id="event">nope</member>
                                <member id="target">monitor_test</member>
                            </clone>
                            <clone prototype="transition">
                                <member id="event">yay</member>
                                <member id="target">succeeded</member>
                            </clone>
                        </member>
                    </clone>

                    <clone id="test_monitor_reject_fire" prototype="skill_idle_duration">
                        <member id="duration">0.5</member>
                    </clone>

                    <clone id="monitor_reject_fire" prototype="skill_idle">

                        <member id="monitors">
                            <clone prototype="monitor_execution_counter">
                                <member id="event">yay</member>
                                <member id="count">5</member>
                                <member id="fire_on_reject">true</member>
                                <member id="reject_event">nope</member>
                            </clone>
                        </member>
                        <member id="transitions">
                            <clone prototype="transition">
                                <member id="event">nope</member>
                                <member id="target">test_monitor_reject_fire</member>
                            </clone>
                            <clone prototype="transition">
                                <member id="event">yay</member>
                                <member id="target">succeeded</member>
                            </clone>
                        </member>
                    </clone>


                </member>

            </clone>

        </member>

    </clone>

</pitasc>
