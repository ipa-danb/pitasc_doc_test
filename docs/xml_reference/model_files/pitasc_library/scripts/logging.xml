<?xml version="1.0" encoding="UTF-8"?>

<pitasc>

    <models>

        <type id="script_residual_publisher" prototype="script">
            <meta>
                <member id="description">Publishes residual values (control error).</member>
                <member id="categories">publisher</member>
                <member id="implementation">
                </member>
            </meta>
            <data>
                <type id="topic" prototype="string_parameter">
                    <meta>
                        <member id="description">Topic name on which to publish.</member>
                        <member id="visibility">basic</member>
                    </meta>
                    <data>residuals</data>
                </type>
            </data>
        </type>

        <type id="script_measurement_publisher" prototype="script">
            <meta>
                <member id="description">Publishes measurement values.</member>
                <member id="categories">publisher</member>
                <member id="implementation">
                    <clone prototype="orocos">
                        <member id="package">pitasc_ros_scripts</member>
                        <member id="component">MeasurementPublisher</member>
                        <member id="arguments">scene, provider, topic, coordinates</member>
                    </clone>
                </member>
            </meta>
            <data>
                <type id="provider" data_type="parameter:data_source" prototype="base">
                    <meta>
                        <member id="description">Data source that provides the measurements to publish.</member>
                        <member id="visibility">required</member>
                    </meta>
                </type>

                <type id="topic" prototype="string_parameter">
                    <meta>
                        <member id="description">Topic name on which to publish.</member>
                        <member id="visibility">basic</member>
                    </meta>
                    <data>measurements</data>
                </type>

                <type id="coordinates" prototype="string_csv">
                    <meta>
                        <member id="description">Coordinates that should be published.</member>
                        <member id="visibility">required</member>
                    </meta>
                </type>
            </data>
        </type>

        <type id="script_measurement_logger" prototype="script">
            <meta>
                <member id="description">Logs internal measurements to a file.</member>
                <member id="categories">logging</member>
                <member id="implementation">
                    <clone prototype="orocos">
                        <member id="package">cppitasc_ros_components</member>
                        <member id="component">ScriptMeasurementLogger</member>
                        <member id="arguments">scene, controllers, provider, file_name, buffer_length, filter, use_simple_filter_keys</member>
                    </clone>
                </member>
            </meta>
            <data>
                <type id="provider" data_type="list:data_source" prototype="base">
                    <meta>
                        <member id="description">Data sources that provide the measurements for logging.</member>
                        <member id="visibility">required</member>
                    </meta>
                </type>

                <type id="file_name" prototype="string_parameter">
                    <meta>
                        <member id="description">Full path and name (incl. extension) of logging file.
                            Non-existing directories are created.
                            The following artifacts (enclosed by curly brackets) are dynamically resolved:
                            '{rospkg (..)]}': full path to rospackge (..) (cf. roscd);
                            '{time (..)}': current time with respective formating (..) (cf. std::strftime)</member>
                        <member id="visibility">required</member>
                    </meta>
                </type>
                <type id="buffer_length" prototype="int_parameter">
                    <meta>
                        <member id="description">Initial length of the preallocated buffer during logging.
                            buffer_length = #samples * (#logged_coordinates + 1).
                            May be extended on the fly.</member>
                        <member id="visibility">expert</member>
                    </meta>
                    <data>512</data>
                </type>
                <type id="filter" prototype="string_csv">
                    <meta>
                        <member id="description">Explicit names of the measurements to be logged.</member>
                        <member id="visibility">basic</member>
                    </meta>
                    <data></data>
                </type>
                <type id="use_simple_filter_keys" prototype="bool_parameter">
                    <meta>
                        <member id="description">Allows to use filter keys without chain (e.g. 'x' instead of 'target_to_tool/x')</member>
                        <member id="visibility">basic</member>
                    </meta>
                    <data>False</data>
                </type>
            </data>
        </type>

        <type id="script_error_logger" prototype="script_measurement_logger">
            <meta>
                <member id="description">Logs control_errors (desired vs. measured values)</member>
                <member id="categories">logging</member>
                <member id="implementation">
                    <clone prototype="orocos">
                        <member id="package">cppitasc_ros_components</member>
                        <member id="component">ScriptErrorLogger</member>
                        <member id="arguments">scene, controllers, coordinates, file_name, buffer_length, filter, use_simple_filter_keys</member>
                    </clone>
                </member>
            </meta>
            <data>
                <type id="controllers" data_type="list:controller" prototype="base">
                    <meta>
                        <member id="description">Controllers whose control errors are logged.</member>
                        <member id="visibility">required</member>
                    </meta>
                </type>
            </data>
        </type>

        <type id="script_status_publisher" prototype="script">
            <meta>
                <member id="description">Publishes the maximum residual scaled between 0 and 1.</member>
                <member id="categories">publisher</member>
                <member id="implementation">
                </member>
            </meta>
            <data>
                <type id="topic" prototype="string_parameter">
                    <meta>
                        <member id="description">Topic name on which the status is published.</member>
                        <member id="visibility">basic</member>
                    </meta>
                    <data>status</data>
                </type>
                <type id="coordinates" prototype="string_csv">
                    <meta>
                        <member id="description">Coordinates that will be published.</member>
                        <member id="visibility">required</member>
                    </meta>
                </type>
            </data>
        </type>

    </models>
</pitasc>
